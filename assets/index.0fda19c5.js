const g=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))e(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&e(a)}).observe(document,{childList:!0,subtree:!0});function s(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerpolicy&&(n.referrerPolicy=i.referrerpolicy),i.crossorigin==="use-credentials"?n.credentials="include":i.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function e(i){if(i.ep)return;i.ep=!0;const n=s(i);fetch(i.href,n)}};g();class b{constructor({ctx:t,image:s,x:e,y:i,width:n,height:a,crop:o=null}){this.ctx=t,this.image=s,this.x=e,this.y=i,this.width=n,this.height=a,this.crop=o}draw(){const t=[this.x,this.y,this.width,this.height];this.crop&&t.unshift(...Object.values(this.crop)),this.ctx.drawImage(this.image,...t)}}class v{constructor({ctx:t,x:s,y:e,width:i,height:n,strokeColor:a}){this.ctx=t,this.x=s,this.y=e,this.width=i,this.height=n,this.strokeColor=a!=null?a:null}draw(){this.ctx.beginPath(),this.ctx.rect(this.x,this.y,this.width,this.width),this.strokeColor&&(this.ctx.strokeStyle=this.strokeColor),this.ctx.stroke()}}class T{constructor({ctx:t,x:s,y:e,radius:i,strokeColor:n,fillColor:a,opacity:o}){this.ctx=t,this.x=s,this.y=e,this.radius=i,this.strokeColor=n!=null?n:null,this.fillColor=a!=null?a:null,this.opacity=o!=null?o:1}draw(){this.ctx.save(),this.ctx.globalAlpha=this.opacity,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI),this.strokeColor&&(this.ctx.strokeStyle=this.strokeColor),this.fillColor&&(this.ctx.fillStyle=this.fillColor),this.ctx.stroke(),this.ctx.fill(),this.ctx.closePath(),this.ctx.restore()}}const x=[[0,1],[0,-1],[1,0],[-1,0]],P="./assets/images/sprite.png";class r{static random(t,s){return Math.floor(Math.random()*(s-t+1))+t}static isAround(t,s){return x.some(([e,i])=>e+t.y===s.y&&i+t.x===s.x)}static getDirection(t,s){return t>s?-1:t<s?1:0}static isCandyInTarget(t){return Number(t.x)===Number(t.targetX)&&Number(t.y)===Number(t.targetY)}static lerp(t,s,e){return(1-e)*t+e*s}static smootherStep(t){return Math.pow(t,3)*(t*(t*6-15)+10)}static inBoundary(t,s,e,i){return t>=0&&t<e&&s>=0&&s<i}static largest(t){return Math.max(...t)}static smallest(t){return Math.min(...t)}}class D{constructor({ctx:t,coordinate:s,x:e=null,y:i=null,targetX:n=null,targetY:a=null,width:o,type:c}){this.ctx=t,this.coordinate={x:s.x,y:s.y},this.width=o,this.x=e!=null?e:this.coordinate.x*this.width,this.y=i!=null?i:this.coordinate.y*this.width,this.targetX=n!=null?n:this.x,this.targetY=a!=null?a:this.y,this.type=c,this.selected=!1,this.destroyable=!1,this.image=new Image,this.image.src=P,this.scale=1}draw(){this.drawSelectedCandy();const s=(this.width-this.width*this.scale)/2*(1/this.scale),e=new b({ctx:this.ctx,image:this.image,x:this.x*(1/this.scale)+s,y:this.y*(1/this.scale)+s,width:this.width,height:this.width,crop:{x:this.type*this.width,y:0,width:this.width,height:this.width}});this.ctx.save(),this.ctx.scale(this.scale,this.scale),e.draw(),this.ctx.restore()}drawSelectedCandy(){if(!this.selected)return;new v({ctx:this.ctx,x:this.x,y:this.y,width:this.width,height:this.width,strokeColor:"#403f3f"}).draw()}drawDestroyableCandy(){if(!this.destroyable)return;new T({ctx:this.ctx,x:this.x+this.width/2,y:this.y+this.width/2,radius:this.width*.3,fillColor:"#7d7d7d",strokeColor:"#1e1e1e",opacity:.5}).draw()}movePosition({y:t,x:s}){this.x=s,this.y=t}updateTarget({targetY:t,targetX:s}){this.targetY=t,this.targetX=s}async movePositionToTarget(){return new Promise(t=>{let s=0;const e=()=>{if(r.isCandyInTarget(this))return t();const i=r.smootherStep(s),n={x:Number(r.lerp(this.x,this.targetX,i).toFixed(7)),y:Number(r.lerp(this.y,this.targetY,i).toFixed(7))};this.movePosition(n),s+=.01,setTimeout(e,10)};e()})}async animateScaleDown(){return new Promise(t=>{let s=0;const e=()=>{if(this.scale===0)return t();const i=r.smootherStep(s);this.scale=Number(r.lerp(this.scale,0,i).toFixed(7)),s+=.02,setTimeout(e,10)};e()})}}class S{constructor({canvas:t}){this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.size=9,this.candyTypeCount=5,this.cellWidth=this.canvas.width/this.size,this.candies=Array(this.size).fill([]).map(()=>Array(this.size).fill(null)),this.selectedCandyCoordinate={first:null,second:null},this.isSwapBack=!1,this.animating=!1,this.animationJobs=[],this.newCandies=[]}init(){this.candies.forEach((t,s)=>t.forEach((e,i)=>{this.candies[s][i]=this.createCandyInstance({type:r.random(0,this.candyTypeCount),coordinate:{y:s,x:i}})})),this.bindEventListener(),this.swapDestroyableCandy(),this.render()}bindEventListener(){this.canvas.addEventListener("click",({offsetY:t,offsetX:s})=>{if(this.isAnimating)return;const{y:e,x:i}={x:Math.floor(s/this.cellWidth),y:Math.floor(t/this.cellWidth)};this.clickHandler({y:e,x:i})})}async clickHandler({y:t,x:s}){const e=this.candies[t][s];if(e.selected)return;if(!this.selectedCandyCoordinate.first){this.selectedCandyCoordinate.first={y:t,x:s},e.selected=!0;return}const{y:i,x:n}=this.selectedCandyCoordinate.first;if(!r.isAround(this.selectedCandyCoordinate.first,{y:t,x:s})){this.selectedCandyCoordinate.first=null,this.candies[i][n].selected=!1;return}this.selectedCandyCoordinate.second={y:t,x:s},this.candies[i][n].selected=!1,await this.swapCandyPosition(this.selectedCandyCoordinate.first,this.selectedCandyCoordinate.second),this.selectedCandyCoordinate={first:null,second:null}}async swapCandyPosition(t,s){const e=this.candies[t.y][t.x],i=this.candies[s.y][s.x];e.updateTarget({targetY:i.y,targetX:i.x}),i.updateTarget({targetY:e.y,targetX:e.x}),this.isAnimating=!0,await Promise.all([e.movePositionToTarget(),i.movePositionToTarget()]);const n=this.candies[t.y][t.x];if(this.candies[t.y][t.x]=this.createCandyInstance({...i,coordinate:{y:t.y,x:t.x}}),this.candies[s.y][s.x]=this.createCandyInstance({...n,coordinate:{y:s.y,x:s.x}}),this.isAnimating=!1,this.isSwapBack){this.isSwapBack=!1;return}const a=this.checkDestroyableCandy();if(!a.length){this.isSwapBack=!0,await this.swapCandyPosition(t,s);return}await this.destroyCandy(a)}checkDestroyableCandy(){const t=[];for(const[s,e]of this.candies.entries())for(const[i,n]of e.entries()){if(n.destroyable)continue;const a=this.traverseCandy(n);a.length>0&&t.push(a)}return t}traverseCandy(t){const s=[];for(const[e,i]of x){if(!this.isDestroyableCandy(t,[e,i]))continue;const[n,a]=[t.coordinate.y,t.coordinate.x];let o=n,c=a;for(;r.inBoundary(o,c,this.size,this.size)&&this.candies[o][c].type===t.type;)this.candies[o][c].destroyable=!0,s.push([o,c]),o+=e,c+=i}return s}isDestroyableCandy(t,[s,e]){const[i,n]=[t.coordinate.y,t.coordinate.x],[a,o]=[i+s,n+e],[c,l]=[i+s+s,n+e+e];return r.inBoundary(o,a,this.size,this.size)&&r.inBoundary(l,c,this.size,this.size)&&this.candies[a][o].type===t.type&&this.candies[c][l].type===t.type}swapDestroyableCandy(){for(;;){const t=this.checkDestroyableCandy();if(!t.length)return;for(const s of t){const e=[...Array(this.candyTypeCount+1).keys()].slice(1);for(const[i,n]of x){const a=r.random(0,s.length-1),[o,c]=s[a],[l,y]=[o+i,c+n];if(!r.inBoundary(y,l,this.size,this.size))continue;const u=this.candies[l][y],h=e.indexOf(u.type);h!==-1&&e.splice(h,1);const w=r.random(0,e.length);this.candies[o][c].type=w}this.removeCandiesDestroyable(s)}}}async destroyCandy(t){this.isAnimating=!0;const s=t[0],e=s.map(([h])=>h),i=s.map(([,h])=>h),n=r.smallest(e),a=r.largest(e),o=r.smallest(i),c=r.largest(i),l=a-n+1,y=c-o+1;this.markCandyAsDestroyed(s);for(let h=o;h<o+y;h++)this.slideDownCandy({x:h,y:n},l),this.fillEmptyPosition({x:h,y:l});await Promise.all(this.newCandies.filter(({isDestroyCandy:h})=>h===!0).map(({candy:h})=>h.animateScaleDown())),await this.animateDestroyedCandies(),this.newCandies=[];for(const h of t)this.removeCandiesDestroyable(h);const u=this.checkDestroyableCandy();u.length&&await this.destroyCandy(u),this.isAnimating=!1}async animateDestroyedCandies(){const t=this.newCandies.filter(({isDestroyCandy:s})=>!s);t.forEach(({y:s,x:e,candy:i})=>this.candies[s][e]=i),await Promise.all(t.map(({candy:s})=>s.movePositionToTarget()))}markCandyAsDestroyed(t){for(const[s,e]of t)this.newCandies.push({x:e,y:s,isDestroyCandy:!0,candy:this.candies[s][e]})}slideDownCandy(t,s){for(let e=t.y-1;e>=0;e--){const i=this.candies[e][t.x];this.newCandies.push({x:t.x,y:e+s,isDestroyCandy:!1,candy:this.createCandyInstance({...this.candies[e+s][t.x],x:i.x,y:i.y,type:i.type,targetY:i.y+s*this.cellWidth})})}}fillEmptyPosition(t){for(let s=t.y-1;s>=0;s--)this.newCandies.push({y:s,x:t.x,isDestroyCandy:!1,candy:this.createCandyInstance({coordinate:{y:s,x:t.x},y:(s-t.y)*this.cellWidth,targetY:s*this.cellWidth,type:r.random(0,this.candyTypeCount)})})}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.draw(),setTimeout(this.render.bind(this),10)}draw(){this.candies.forEach(t=>t.forEach(s=>s.draw()))}createCandyInstance(t){return new D({ctx:this.ctx,width:this.cellWidth,...t})}removeCandiesDestroyable(t){for(const[s,e]of t)this.candies[s][e].destroyable=!1}runAnimationJobs(){this.animationJobs.forEach(({interpolation:t,initial:s,candy:e},i)=>{if(r.isCandyInTarget(e))this.animationJobs.splice(i,1);else{const n=r.smootherStep(t),a=r.lerp(e.x,e.targetX,n).toFixed(7),o=r.lerp(e.y,e.targetY,n).toFixed(7);e.movePosition({x:a,y:o}),this.animationJobs[i].interpolation+=.01}})}addAnimationToCandy(t){const s={y:t.y,x:t.x};this.animationJobs.push({initial:s,candy:t,interpolation:0})}async animateSwapV2(t,s){const e=this.candies[t.y][t.x],i=this.candies[s.y][s.x];this.addAnimationToCandy(e),this.addAnimationToCandy(i)}}const f=document.querySelector("#btn-start"),C=document.querySelector("#logo"),p=document.querySelector("#canvas"),A=document.querySelector(".starter-wrapper"),k=new S({canvas:p}),I=async()=>{await Promise.all([m(C,["scale-out"]),m(f,["fade-out"])]),C.style.visibility="hidden",f.style.visibility="hidden",await m(A,["active"]),p.style.visibility="visible",await m(p,["show"]),k.init()};f.addEventListener("click",I);const m=(d,t)=>new Promise(s=>{const e=["animate",...t];d.classList.add(...e);const i=()=>(d.removeEventListener("transitionend",i),s());d.addEventListener("transitionend",i)});
